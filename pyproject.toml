[tool.poetry]
name = "geoapps-utils"
version = "0.3.0"
license = "MIT"
description = "Geoapps Utils"
authors = ["Mira Geoscience <support@mirageoscience.com>"]
maintainers = ["Dominique Fournier <dominiquef@mirageoscience.com>"]
repository = "https://github.com/MiraGeoscience/geoapps-utils"
#documentation  = "https://mirageoscience-geoapps-utils.readthedocs-hosted.com/"
homepage = "https://www.mirageoscience.com/mining-industry-software/python-integration/"
readme = "README.rst"

include = [
    { path = "COPYING", format = ["sdist", "wheel"] },
    { path = "COPYING.LESSER", format = ["sdist", "wheel"] },
    { path = "LICENSE", format = ["sdist", "wheel"] },
    { path = "README.rst", format = ["sdist", "wheel"] },
    { path = "THIRD_PARTY_SOFTWARE.rst", format = ["sdist", "wheel"] },
    { path = "docs/**/THIRD_PARTY_SOFTWARE.rst", format = ["sdist", "wheel"] },
]

classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Physics",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Operating System :: MacOS",
    "Natural Language :: English",
]

[tool.poetry.scripts]

[tool.poetry.dependencies]
python = "^3.10, <3.11"

numpy = "~1.23.5"  # also in geoh5py
pydantic = "~2.5.2"
scipy = "~1.10.1"

## pip dependencies from Git repositories
#----------------------------------------
geoh5py = {version = "~0.9.0", source = "pypi", allow-prereleases = true}
#geoh5py = {url = "https://github.com/MiraGeoscience/geoh5py/archive/refs/heads/release/0.9.0.zip#sha256="}
#geoh5py = {url = "http://localhost:8888/geoh5py.tar.gz#sha256="}

## dependencies for plots with Dash
#-------------------------------
dash = {version = "^2.12", optional = true}
flask = {version = "^3.0.3", optional = true}
pyqtwebengine = {version = "~5.15.2, <5.15.7", optional = true}  # 5.15.7 and newer on conda-forge, but not in PyPI
pyside2 = {version = "~5.15.2.1", optional = true}  # 5.15.3 and newer on conda-forge, but not in PyPI

## indirect dependencies, forcing them here for installation through Conda not pip
#---------------------------------------------------------------------------------
h5py = "^3.2.1"  # from geoh5py
Pillow = "~10.3.0"  # from geoh5py

## about pip dependencies
# to be specified to work with conda-lock
# - from PyPI: my_package = { version = "1.2.3", source = "pypi" }
# - from URL:
#   - for a tags:   my_package = { url = "https://github.com/ORGANISATION/REPO/archive/refs/tags/VERSION_TAG.zip#sha256=" }
#   - for a branch: my_package = { url = "https://github.com/ORGANISATION/REPO/archive/refs/heads/BRANCH.zip#sha256=" }
# Note - conda-lock does not support the syntax: my_package = { git = ... }
#        while poetry2conda supports only { git = "...", tag = "..." }, and not { url = ... }

[tool.conda-lock.dependencies]
pyside2 = {version = "5.15.*", optional = true}  # allow Conda to resolve to a higher existing version than in PyPI

[tool.poetry.group.dev.dependencies]
Pygments = "*"
pylint = "*"
pytest = "*"
pytest-cov = "*"
tomli = "*"

[tool.poetry.extras]
dash = [
    "dash",
    "flask",
    "pyqtwebengine",
    "pyside2",
]

[tool.conda-lock]
platforms = ['win-64', 'linux-64']
channels = ['conda-forge']

[tool.ruff]
target-version = "py310"

[tool.ruff.lint]
ignore = [
    "B028",  # no-explicit-stacklevel for warnings.warn()
    "E501",  # line-too-long - code is reformatted (do not care about comments and docstring)
    "F401",  # unsused-import - covered by pycln
]
select = [
    "A",  # flake8-builtins
    "B",  # flake8-bugbear
    "B006",  # Do not use mutable data structures for argument defaults
    "B9",  # flake8-bugbear opiniated warnings
    "BLE",  # flake8-blind-except
    "C4",  # flake8-comprehensions
    "C9",  # mccabe
    "E",  # pycodestyle errors
    "F",  # pyflakes
    "I",  # isort
    "RUF",  # ruff rules
    "TID", # flake8-tidy-imports
    "UP",  # pyupgrade
    "W",  # pycodestyle warnings
]

[tool.ruff.lint.mccabe]
max-complexity = 18

[tool.ruff.lint.isort]
lines-after-imports = 2

[tool.ruff.format]
# default formatting is just fine

[tool.mypy]
warn_unused_configs = true
ignore_missing_imports = true
scripts_are_modules = true
show_error_context = true
show_column_numbers = true
check_untyped_defs = true

plugins = [
    "numpy.typing.mypy_plugin",
    "pydantic.mypy"
]

[tool.pytest.ini_options]

[tool.coverage.run]
branch = true
source = ["geoapps_utils"]
omit = ["geoapps_utils/application/*"]

[tool.coverage.report]
exclude_lines = [
    "raise NotImplementedError",
    "pass",
    "if TYPE_CHECKING",
    "pragma: no cover"
]

fail_under = 78

[tool.coverage.html]
skip_empty = true
skip_covered = true

[build-system]
requires = ["poetry-core>=1.0.0", "setuptools"]
build-backend = "poetry.core.masonry.api"
